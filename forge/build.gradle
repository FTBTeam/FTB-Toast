plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

def ENV = System.getenv()

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
//    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

if (ENV.CURSEFORGE_KEY) {
    curseforge {
        apiKey = ENV.CURSEFORGE_KEY
        project {
            id = project.curseforge_id
            releaseType = project.curseforge_type
            addGameVersion "Forge"
            addGameVersion "1.19"
            mainArtifact(remapJar.archivePath)
            changelog = getGitChangelog
            changelogType = 'markdown'
        }
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = "${rootProject.archives_base_name}-${project.name}"
            from components.java
        }
    }

    repositories {
        if (ENV.FTB_MAVEN_TOKEN) {
            maven {
                url "https://maven.ftb.dev/release"
                credentials {
                    username = "ftb"
                    password = "${ENV.FTB_MAVEN_TOKEN}"
                }
            }
        }

        if (ENV.SAPS_TOKEN) {
            maven {
                url "https://maven.saps.dev/minecraft"
                credentials {
                    username = "ftb"
                    password = "${ENV.SAPS_TOKEN}"
                }
            }
        }
    }
}

rootProject.tasks.getByName("curseforgePublish").dependsOn tasks.getByName("curseforge")
